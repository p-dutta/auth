openapi: 3.0.0
info:
  title: Token Provider
  description: APIs for authentication/token provider and policy management
  version: 1.0.0
paths:
  /api/auth/token:
    post:
      summary: Create Token
      description: Endpoint to get tokens.
      operationId: getTokens
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/TokenRequest.yaml'
      responses:
        '200':
          description: Token granted
          content:
            application/json:
              schema:
                $ref: './components/schemas/SuccessResponse.yaml'
  /api/auth/refresh:
    post:
      summary: Refresh Token
      description: Endpoint to refresh access tokens.
      operationId: refreshToken
      tags:
        - Auth
      requestBody:
        required: false
        content: {}
      responses:
        '200':
          description: Tokens refresh successful
          content:
            application/json:
              schema:
                $ref: './components/schemas/SuccessResponse.yaml'
        '401':
          description: Unauthorized. Invalid or expired token.
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'
      security:
        - BearerAuth: []

  /auth/revoke:
    post:
      summary: Revoke access token
      description: Revoke the access token using a bearer token.
      tags:
        - Auth
      operationId: revokeAccessToken
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema: {}
      responses:
        '200':
          description: Token revoked successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/SuccessResponse.yaml'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'

  /policy:
    post:
      summary: Create a new policy
      description: Create a new policy record.
      tags:
        - Policy
      operationId: createPolicy
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/PolicyRequest.yaml'
      responses:
        '201':
          description: New policy created successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/SuccessResponse.yaml'
        '400':
          description: Invalid request or request body
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'
        '409':
          description: Policy already exists against this type
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'

    get:
      summary: Get all policies
      description: Retrieve all policy records.
      tags:
        - Policy
      operationId: getAllPolicies
      responses:
        '200':
          description: Policies retrieved successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/SuccessResponse.yaml'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'

  /policy/{id}:
    get:
      summary: Get a policy by ID
      description: Retrieve a policy record by its ID.
      tags:
        - Policy
      operationId: getPolicyById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the policy to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Policy data retrieved successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/SuccessResponse.yaml'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'
        '404':
          description: Policy not found
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'

    put:
      summary: Update a policy by ID
      description: Update a policy record by its ID.
      tags:
        - Policy
      operationId: updatePolicyById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the policy to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/PolicyRequest.yaml'
      responses:
        '200':
          description: Policy updated successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/SuccessResponse.yaml'
        '400':
          description: Invalid ID or request body
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'
        '404':
          description: Policy not found
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'
        '409':
          description: Cannot update a policy to an existing type
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'

    delete:
      summary: Delete a policy by ID
      description: Delete a policy record by its ID.
      tags:
        - Policy
      operationId: deletePolicyById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the policy to delete
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Policy deleted successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/SuccessResponse.yaml'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'
        '404':
          description: Policy not found
          content:
            application/json:
              schema:
                $ref: './components/schemas/ErrorResponse.yaml'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer